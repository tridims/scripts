#!/usr/bin/env python3

import os
import sys
import xml.etree.ElementTree as ET
from xml.dom import minidom

def is_text_file(file_path):
    try:
        with open(file_path, 'r', encoding='ascii') as f:
            f.read()
        return True
    except UnicodeDecodeError:
        return False

def create_project_context_file(project_root, output_file):
    project_root = os.path.abspath(project_root)
    project_name = os.path.basename(project_root)

    project = ET.Element('project')
    project.set('name', project_name)
    project.set('root_directory', project_root)

    for root, dirs, files in os.walk(project_root):
        folder_path = os.path.relpath(root, project_root)
        folder_name = os.path.basename(root)
        if folder_path == '.':
            folder_path = ''
            folder_name = project_name

        folder = ET.SubElement(project, 'folder')
        folder.set('name', folder_name)
        folder.set('path', folder_path)

        for file in files:
            file_path = os.path.join(folder_path, file)
            if is_text_file(os.path.join(project_root, file_path)):
                with open(os.path.join(project_root, file_path), 'r', encoding='utf-8') as f:
                    content = f.read()
                file_element = ET.SubElement(folder, 'file')
                file_element.set('name', file)
                file_element.set('path', file_path)
                file_element.text = content

    tree = ET.ElementTree(project)
    xml_string = minidom.parseString(ET.tostring(project, encoding='utf-8')).toprettyxml(indent="    ")
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(xml_string)

def main():
    if len(sys.argv) != 3:
        print("Usage: python script.py <project_root> <output_file>")
        sys.exit(1)

    project_root = sys.argv[1]
    output_file = sys.argv[2]

    if not os.path.isdir(project_root):
        print(f"Error: {project_root} is not a valid directory.")
        sys.exit(1)

    create_project_context_file(project_root, output_file)
    print(f"Project context file created: {output_file}")

if __name__ == '__main__':
    main()
